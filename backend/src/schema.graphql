# import * from './generated/prisma.graphql'
type SuccessMessage {
    message: String
}


type Mutation {
    createItem(title: String, description: String, price: Int,
    image: String, largeImage: String): Item!
    #TODO when course is finished figure out how to add image flow to updateItem
    updateItem(id : ID!, title: String, description: String, price: Int): Item!
    deleteItem(id: ID!): Item
    signUp(email: String!, password: String!, name: String!): User!
    signIn(email: String!, password: String!): User!
    signOut: SuccessMessage
    requestReset(email: String!): SuccessMessage
    resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
    updatePermissions(permissions: [Permission], userId: ID!): User
    addToCart(id: ID!): CartItem
    removeFromCart(id: ID!): CartItem
    createOrder(token: String!): Order!
}

# if we want to return a list of Dogs via this query, we need to define Dog as a type above
# we will return an array of dogs (if you write it as [Dog!]!, means we cannot return null for any item so [{name:'Snickers'}] is valid but [{name:'Snickers'},null] is not
#type Query {
#    dogs: [Dog]!
#}



type Query {
    items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
    item(where: ItemWhereUniqueInput!): Item
    itemsConnection(where: ItemWhereInput): ItemConnection!
    me: User
    users: [User]!
    order(id: ID!): Order
    orders(orderBy: OrderOrderByInput): [Order]!

}
type User {
    id: ID!
    name: String!
    email: String!
    permissions: [Permission!]!
    cart: [CartItem!]!
    orders: [OrderItem]
}